name: Move linked issue to Review when PR opens or updates
on:
  pull_request:
    types:
      - opened
      - synchronize
      - ready_for_review
      - review_requested

jobs:
  move_issue_to_review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      repository-projects: write
    env:
      GH_TOKEN: ${{ secrets.REPO_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI with token
        run: |
          gh config set prompt disabled
          echo "‚úÖ GitHub CLI configured with token"
      - name: Get repository owner and name
        id: get_owner_and_repo
        run: |
          OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          echo "OWNER=$OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Get linked issue from PR
        id: get_linked_issue
        run: |
          PR_NUMBER=1
          # Pega o JSON completo das issues ligadas √† PR
          ISSUES_JSON=$(mktemp)
          gh pr view $PR_NUMBER --json closingIssuesReferences > "$ISSUES_JSON"
          echo "üìÑ Raw closingIssuesReferences response:"
          cat "$ISSUES_JSON"
          # Extrai o array de issues do campo closingIssuesReferences
          ISSUES_ARRAY=$(jq -r '.closingIssuesReferences // []' "$ISSUES_JSON")
          # Pega a primeira issue
          ISSUE_JSON=$(echo "$ISSUES_ARRAY" | jq -r '.[0] // {}')
          if [ "$(echo "$ISSUE_JSON" | jq type)" = '"null"' ]; then
            echo "‚ö†Ô∏è No linked issue found. Skipping..."
            exit 0
          fi
          # Extrai n√∫mero diretamente (com fallback pra URL se necess√°rio)
          ISSUE_NUMBER=$(echo "$ISSUE_JSON" | jq -r '.number // (.url | sub(".*/"; "")) // empty')
          if ! [[ "$ISSUE_NUMBER" =~ ^[0-9]+$ ]]; then
            echo "‚ùå Failed to extract valid issue number from PR"
            exit 1
          fi
          echo "üîó Linked issue: #$ISSUE_NUMBER"
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}

      - name: Get Issue Global Node ID
        id: get_issue_node_id
        run: |
          OWNER=${{ env.OWNER }}
          REPO_NAME=${{ env.REPO_NAME }}
          ISSUE_NUMBER=${{ env.ISSUE_NUMBER }}
          echo "üîç Fetching issue #$ISSUE_NUMBER from $OWNER/$REPO_NAME..."
          ISSUE_JSON=$(gh api graphql -f query='
            query {
              repository(owner: "'$OWNER'", name: "'$REPO_NAME'") {
                issue(number: '$ISSUE_NUMBER') {
                  id
                  title
                }
              }
            }')
          echo "üìÑ Raw GraphQL response:"
          echo "$ISSUE_JSON"
          ISSUE_ID=$(echo "$ISSUE_JSON" | jq -r '.data.repository.issue.id')
          if [ -z "$ISSUE_ID" ] || [ "$ISSUE_ID" = "null" ]; then
            echo "‚ùå Failed to find issue ID"
            exit 1
          fi
          echo "‚úÖ Found Issue ID: $ISSUE_ID"
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
        shell: bash

      - name: Get project ID from repository project number 7
        id: get_project_id
        run: |
          OWNER=${{ env.OWNER }}
          REPO_NAME=${{ env.REPO_NAME }}
          echo "üîç Fetching project V2 number 7 in repository $OWNER/$REPO_NAME..."
          PROJECT_JSON=$(gh api graphql -f query='
            query {
              repository(owner: "'$OWNER'", name: "'$REPO_NAME'") {
                projectV2(number: 7) {
                  id
                  title
                }
              }
            }')
          echo "üìÑ Raw GraphQL response:"
          echo "$PROJECT_JSON"
          PROJECT_ID=$(echo "$PROJECT_JSON" | jq -r '.data.repository.projectV2.id')
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "‚ùå Failed to find project in repository $OWNER/$REPO_NAME"
            exit 1
          fi
          echo "‚úÖ Found project ID: $PROJECT_ID"
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
        shell: bash

      - name: Get or add item ID from issue
        id: get_item_id
        run: |
          PROJECT_ID="${{ env.PROJECT_ID }}"
          ISSUE_ID="${{ env.ISSUE_ID }}"
          echo "üîç Adding issue $ISSUE_ID to project $PROJECT_ID..."
          ITEM_JSON=$(gh api graphql -f query='
            mutation {
              addProjectV2ItemById(input: {projectId: "'$PROJECT_ID'", contentId: "'$ISSUE_ID'"}) {
                item {
                  id
                }
              }
            }')
          echo "üìÑ Raw GraphQL response:"
          echo "$ITEM_JSON"
          ITEM_ID=$(echo "$ITEM_JSON" | jq -r '.data.addProjectV2ItemById.item.id')
          if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" = "null" ]; then
            echo "‚ö†Ô∏è Failed to add or find item for this issue"
            exit 1
          fi
          echo "‚úÖ Item ID: $ITEM_ID"
          echo "ITEM_ID=$ITEM_ID" >> $GITHUB_ENV
        shell: bash

      - name: Get Status field and Review option IDs
        id: get_status_info
        run: |
          PROJECT_ID="${{ env.PROJECT_ID }}"
          COLUMN_NAME="Review"
          echo "üîç Fetching fields and options from project $PROJECT_ID..."
          FIELD_INFO=$(gh api graphql -f query='
            query {
              node(id: "'$PROJECT_ID'") {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }')
          echo "üìÑ Raw field info response:"
          echo "$FIELD_INFO"
          STATUS_FIELD_ID=$(echo "$FIELD_INFO" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
          IN_PROGRESS_OPTION_ID=$(echo "$FIELD_INFO" | jq -r --arg COLUMN_NAME "$COLUMN_NAME" '
            .data.node.fields.nodes[]
            | select(.name == "Status")
            | .options[]
            | select(.name == $COLUMN_NAME)
            | .id')
          if [ -z "$STATUS_FIELD_ID" ] || [ "$STATUS_FIELD_ID" = "null" ]; then
            echo "‚ùå Status field not found"
            exit 1
          fi
          if [ -z "$IN_PROGRESS_OPTION_ID" ] || [ "$IN_PROGRESS_OPTION_ID" = "null" ]; then
            echo "‚ùå Column $COLUMN_NAME not found in Status field"
            exit 1
          fi
          echo "STATUS_FIELD_ID=$STATUS_FIELD_ID" >> $GITHUB_ENV
          echo "IN_PROGRESS_OPTION_ID=$IN_PROGRESS_OPTION_ID" >> $GITHUB_ENV
        shell: bash

      - name: Move issue to column Review
        run: |
          ITEM_ID="${{ env.ITEM_ID }}"
          STATUS_FIELD_ID="${{ env.STATUS_FIELD_ID }}"
          IN_PROGRESS_OPTION_ID="${{ env.IN_PROGRESS_OPTION_ID }}"
          PROJECT_ID="${{ env.PROJECT_ID }}"
          echo "üîç Updating item $ITEM_ID in project $PROJECT_ID..."
          echo "‚û°Ô∏è Setting field $STATUS_FIELD_ID to option $IN_PROGRESS_OPTION_ID"
          RESPONSE=$(gh api graphql -f query='
            mutation {
              updateProjectV2ItemFieldValue(input: {
                projectId: "'$PROJECT_ID'",
                itemId: "'$ITEM_ID'",
                fieldId: "'$STATUS_FIELD_ID'",
                value: { singleSelectOptionId: "'$IN_PROGRESS_OPTION_ID'" }
              }) {
                projectV2Item {
                  id
                }
              }
            }')
          echo "üìÑ Raw GraphQL response:"
          echo "$RESPONSE"
          if echo "$RESPONSE" | grep -q '"errors"'; then
            echo "‚ùå Failed to update project item"
            exit 1
          fi
          echo "‚úÖ Issue successfully moved to column: Review"
